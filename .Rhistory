theme(legend.position = "bottom",
strip.text = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.text = element_text(size = 18),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
plot.title.position = "plot",
plot.subtitle = element_text(face = "bold",
size = 20)) +
xlab(NULL) +
ylab(NULL) +
labs(subtitle = "Wichtigste Wahlthemen nach Parteizugehörigkeit")
ggsave(filename = "issues.png",
plot = issues_fig,
device = png,
width = 13,
height = 9)
issues_fig <-
ggplot(data = issues,
aes(y = issues,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
width = 0.6,
position = position_dodge(width = 0.75)) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 1.25),
position = position_dodge(width = 0.75),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 50),
labels = scales::percent_format(scale = 1, suffix = "%"),
expand = expansion(0, 1)) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.text = element_text(size = 18),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
plot.title.position = "plot",
plot.subtitle = element_text(face = "bold",
size = 20)) +
xlab(NULL) +
ylab(NULL) +
labs(subtitle = "Wichtigste Wahlthemen nach Parteizugehörigkeit")
ggsave(filename = "issues.png",
plot = issues_fig,
device = png,
width = 13,
height = 9)
issues_fig <-
ggplot(data = issues,
aes(y = issues,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
width = 0.6,
position = position_dodge(width = 0.75)) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 1.5),
position = position_dodge(width = 0.75),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 50),
labels = scales::percent_format(scale = 1, suffix = "%"),
expand = expansion(0, 1)) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 18),
legend.text = element_text(size = 18),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
plot.title.position = "plot",
plot.subtitle = element_text(face = "bold",
size = 20)) +
xlab(NULL) +
ylab(NULL) +
labs(subtitle = "Wichtigste Wahlthemen nach Parteizugehörigkeit")
ggsave(filename = "issues.png",
plot = issues_fig,
device = png,
width = 13,
height = 9)
voters_fig <-
ggplot(data = groups,
aes(y = group,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
position = position_dodge2()) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 7.5),
position = position_dodge2(width = 1),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1, suffix = "%")) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 20, face = "bold"),
axis.text = element_text(size = 18),
legend.text = element_text(size = 18),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
xlab(NULL) +
ylab(NULL) +
facet_wrap(~strong, ncol = 2, nrow = 1, scales = "free_y")
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 9)
voters_fig <-
ggplot(data = groups,
aes(y = group,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
position = position_dodge2()) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 7.5),
position = position_dodge2(width = 1),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1, suffix = "%")) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14),
legend.text = element_text(size = 14),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
xlab(NULL) +
ylab(NULL) +
facet_wrap(~strong, ncol = 2, nrow = 1, scales = "free_y")
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 9)
groups <- groups %>%
mutate(group = factor(group,
levels = sort_values,
labels = str_wrap(sort_values, 30)),
party = factor(party, levels = c("Republikanisch / tendenziell Republikanisch",
"Demokratisch / tendenziell Demokratisch")),
strong = factor(strong,
levels = c("Stärkste Wählergruppen der Demokratischen Partei",
"Stärkste Wählergruppen der Republikanischen Partei"),
labels = c("Stärkste Wählergruppen\nder Demokraten",
"Stärkste Wählergruppen\nder Republikaner")))
voters_fig <-
ggplot(data = groups,
aes(y = group,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
position = position_dodge2()) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 7.5),
position = position_dodge2(width = 1),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1, suffix = "%")) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14),
legend.text = element_text(size = 14),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
xlab(NULL) +
ylab(NULL) +
facet_wrap(~strong, ncol = 2, nrow = 1, scales = "free_y")
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 9)
# Voter
groups <- read_csv2("groups.csv") %>%
pivot_longer(cols = -c(group, strong),
names_to = "party",
values_to = "percent")
sort_values <-
groups %>%
split(~strong) %>%
map2(.x = .,
.y = c("Republikanisch / tendenziell Republikanisch",
"Demokratisch / tendenziell Demokratisch"),
\(x, y) {
x %>%
filter(party == y) %>%
arrange(desc(percent)) %>%
pull(group)
})
sort_values <- c(sort_values[[1]], sort_values[[2]])
groups <- groups %>%
mutate(group = factor(group,
levels = sort_values,
labels = str_wrap(sort_values, 30)),
party = factor(party, levels = c("Republikanisch / tendenziell Republikanisch",
"Demokratisch / tendenziell Demokratisch")),
strong = factor(strong,
levels = c("Stärkste Wählergruppen der Demokratischen Partei",
"Stärkste Wählergruppen der Republikanischen Partei"),
labels = c("Stärkste Wählergruppen\nder Demokraten",
"Stärkste Wählergruppen\nder Republikaner")))
voters_fig <-
ggplot(data = groups,
aes(y = group,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
position = position_dodge2()) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 7.5),
position = position_dodge2(width = 1),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1, suffix = "%")) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14),
legend.text = element_text(size = 14),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
xlab(NULL) +
ylab(NULL) +
facet_wrap(~strong, ncol = 2, nrow = 1, scales = "free_y")
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 9)
voters_fig <-
ggplot(data = groups,
aes(y = group,
x = percent,
fill = party)) +
geom_bar(stat = "identity",
position = position_dodge2()) +
geom_text(aes(label = paste0(percent, "%"),
x = percent + 7.5),
position = position_dodge2(width = 1),
size = 5) +
scale_fill_manual("", values = c("red", "blue"),
guide = guide_legend(reverse = TRUE)) +
scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1, suffix = "%")) +
theme_minimal() +
theme(legend.position = "bottom",
strip.text = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 15),
legend.text = element_text(size = 15),
panel.grid = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
xlab(NULL) +
ylab(NULL) +
facet_wrap(~strong, ncol = 2, nrow = 1, scales = "free_y")
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 9)
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 8.5)
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 8.25)
ggsave(filename = "issues.png",
plot = issues_fig,
device = png,
width = 13,
height = 8.25)
ggsave(filename = "voters.png",
plot = voters_fig,
device = png,
width = 13,
height = 8)
ggsave(filename = "issues.png",
plot = issues_fig,
device = png,
width = 13,
height = 8)
library(tidyverse)
library(tigris)
library(plotly)
# Counties
county2020 <- read_csv("countypres_2000-2020.csv") %>%
filter(year == 2020 & party %in% c("DEMOCRAT", "REPUBLICAN") & mode == "TOTAL") %>%
mutate(percent = round(candidatevotes/totalvotes * 100, 1),
county_fips = as.character(county_fips)) %>%
select(year:county_fips , party, percent) %>%
pivot_wider(names_from = party, values_from = percent) %>%
mutate(Differenz = REPUBLICAN-DEMOCRAT)
nyt2020 <- read_csv("nyt_counties_final12042020.csv") %>%
mutate(dem_percent = bidenj/total.votes * 100,
rep_percent = trumpd/total.votes * 100,
Differenz = rep_percent - dem_percent)
us_counties <- counties(cb = TRUE, resolution = "20m") %>%
filter(STATE_NAME  != "Puerto Rico") %>%
shift_geometry()
us_counties_joined <- us_counties %>%
left_join(nyt2020, by = c("GEOID" = "fips"))
election_2020_percdiff_county <-
ggplot(sf::st_cast(us_counties_joined, "MULTIPOLYGON"),
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2) +
scale_fill_gradient2("", low = "blue", mid = scales::muted("purple"), high = "red", breaks =  c(-25, 0, 25, 50, 75)) +
theme_void() +
theme(legend.key.height = unit(3, "cm"),
legend.key.width = unit(0.25, "cm"))
ggplotly(election_2020_percdiff_county)
ggplotly(election_2020_percdiff_county)
ggplotly <- ggplotly(election_2020_percdiff_county)
ggplotly
View(ggplotly)
ggplotly <- ggplotly(election_2020_percdiff_county) %>%
style(hoveron = "fill")
ggplotly <- ggplotly(election_2020_percdiff_county) %>%
style(hoveron = "fill")
View(ggplotly)
us_counties_joined <- us_counties %>%
left_join(nyt2020, by = c("GEOID" = "fips")) %>%
mutate(hover_text = paste("Bundesstaat:", Bundesstaat,
"<br>County:", County,
"<br>Difference:", Differenz))
library(tidyverse)
library(tigris)
library(plotly)
# Counties
county2020 <- read_csv("countypres_2000-2020.csv") %>%
filter(year == 2020 & party %in% c("DEMOCRAT", "REPUBLICAN") & mode == "TOTAL") %>%
mutate(percent = round(candidatevotes/totalvotes * 100, 1),
county_fips = as.character(county_fips)) %>%
select(year:county_fips , party, percent) %>%
pivot_wider(names_from = party, values_from = percent) %>%
mutate(Differenz = REPUBLICAN-DEMOCRAT)
nyt2020 <- read_csv("nyt_counties_final12042020.csv") %>%
mutate(dem_percent = bidenj/total.votes * 100,
rep_percent = trumpd/total.votes * 100,
Differenz = rep_percent - dem_percent)
us_counties <- counties(cb = TRUE, resolution = "20m") %>%
filter(STATE_NAME  != "Puerto Rico") %>%
shift_geometry()
us_counties_joined <- us_counties %>%
left_join(nyt2020, by = c("GEOID" = "fips"))
election_2020_percdiff_county <-
ggplot(sf::st_cast(us_counties_joined, "MULTIPOLYGON"),
aes(fill = Differenz)) +
# geom_sf(color = "gray90", lwd = 0.2) +
scale_fill_gradient2("", low = "blue", mid = scales::muted("purple"), high = "red", breaks =  c(-25, 0, 25, 50, 75)) +
theme_void() +
theme(legend.key.height = unit(3, "cm"),
legend.key.width = unit(0.25, "cm"))
ggplotly <- ggplotly(election_2020_percdiff_county) %>%
style(hoveron = "fill")
plot(ggplotly)
ggplotly
ggplotly <- ggplotly(election_2020_percdiff_county)
ggplotly
gplotly <- ggplotly(election_2020_percdiff_county)
gplotly
us_counties_joined
us_states_joined
us_counties_joined$geometry
us_counties_joined$geometry == "MULTIPOLYGON "
us_counties_joined$geometry %>% plot
ggplot(us_counties_joined,
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2)
ggplot(us_counties_joined,
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2) + ggplotly()
ggplot(us_counties_joined,
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2) %>%  ggplotly()
ggplot(us_counties_joined,
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2) + ggplotly()
election_2020_percdiff_county <-
ggplot(us_counties_joined,
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2)
election_2020_percdiff_county
ggplotly(election_2020_percdiff_county)
election_2020_percdiff_county <-
ggplot(sf::st_cast(us_counties_joined, "MULTIPOLYGON"),
aes(fill = Differenz)) +
geom_sf(color = "gray90", lwd = 0.2)
election_2020_percdiff_county
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,
)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE
)
fig <- plot_ly()
us_counties_joined <- us_counties %>%
left_join(nyt2020, by = c("GEOID" = "fips")) %>%
sf::st_cast("MULTIPOLYGON")
us_counties_joined <- sf::st_cast(us_counties_joined, "MULTIPOLYGON")
# Extract centroids for plotting if necessary
us_counties_joined <- us_counties_joined %>%
mutate(
lon = st_coordinates(st_centroid(geometry))[, 1],
lat = st_coordinates(st_centroid(geometry))[, 2]
)
# Extract centroids for plotting if necessary
us_counties_joined <- us_counties_joined %>%
mutate(
lon = sf::st_coordinates(st_centroid(geometry))[, 1],
lat = sf::t_coordinates(st_centroid(geometry))[, 2]
)
# Extract centroids for plotting if necessary
us_counties_joined <- us_counties_joined %>%
mutate(
lon = sf::st_coordinates(sf::st_centroid(geometry))[, 1],
lat = sf::st_coordinates(sf::st_centroid(geometry))[, 2]
)
# Plot using plot_ly
plot <- plot_ly(
data = us_counties_joined,
type = "scattergeo",
locationmode = "USA-states",
lat = ~lat,
lon = ~lon,
text = ~paste("State:", Bundesstaat, "<br>County:", County, "<br>Difference:", Differenz),
hoverinfo = "text",
marker = list(
color = ~Differenz,
colorscale = list(c(0, 'blue'), c(0.5, 'purple'), c(1, 'red')),
cmin = -25, cmax = 75,
colorbar = list(title = "Difference")
)
) %>%
layout(
geo = list(scope = 'usa', showland = TRUE, landcolor = 'gray95'),
title = "2020 Election Percentage Difference by County"
)
plot
# Plot using plot_ly
plot <- plot_ly(
data = us_counties_joined,
type = "scattergeo",
locationmode = "USA-states",
lat = ~lat,
lon = ~lon,
#text = ~paste("State:", Bundesstaat, "<br>County:", County, "<br>Difference:", Differenz),
hoverinfo = "text",
marker = list(
color = ~Differenz,
colorscale = list(c(0, 'blue'), c(0.5, 'purple'), c(1, 'red')),
cmin = -25, cmax = 75,
colorbar = list(title = "Difference")
)
) %>%
layout(
geo = list(scope = 'usa', showland = TRUE, landcolor = 'gray95'),
title = "2020 Election Percentage Difference by County"
)
plot
us_counties
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
counties <- rjson::fromJSON(file=url)
counties
counties$features
nyt2020
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=counties,
locations=nyt2020$fips,
z=nyt2020$Differenz,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "")
fig <- fig %>% layout(
geo = g
)
fig
